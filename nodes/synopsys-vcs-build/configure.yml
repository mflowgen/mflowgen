#=========================================================================
# Synopsys VCS -- Build
#=========================================================================
# This step is a build node for Synopsys VCS simulations
#
# The mflowgen nodes that handle VCS simulations are:
#
#     - synopsys-vcs-base-opts
#     - synopsys-vcs-rtl-opts
#     - synopsys-vcs-gls-opts
#     - synopsys-vcs-file-funnel
#     - synopsys-vcs-build
#     - synopsys-vcs-sim
#
# The mflowgen common library breaks up a VCS build into two parts:
# options and files.
#
# Options -- The synopsys-vcs-base-opts node provides a set of common VCS
# options listed within a single YAML file output. Other nodes such as
# synopsys-vcs-rtl-opts and synopsys-vcs-gls-opts can further transform
# these options by accepting the YAML input, adding more options, and
# making a new YAML output.
#
# Files -- The synopsys-vcs-file-funnel node takes all files, and creates
# the authoritative file list for simulation. It then funnels the files
# into the build.
#
# The VCS build happens in the synopsys-vcs-build node, a simple node
# that combines the options and the files and runs compilation.
#
# The VCS simulation is executed by the synopsys-vcs-sim node, which
# accepts a built simulator and runs tests with it.
#
# This approach allows the same mflowgen nodes (building and simulating)
# to be reused for both RTL and gate-level simulations. The difference is
# in whether rtl-opts or gls-opts is connected, as well as which design
# files are funneled into the build node.
#
# Author : Christopher Torng
# Date   : January 20, 2025
#

name: synopsys-vcs-build

#-------------------------------------------------------------------------
# Inputs and Outputs
#-------------------------------------------------------------------------

inputs:
  - adk
  - opts.yml
  - files
  - files-order.yml

outputs:
  - simv
  - simv.daidir

#-------------------------------------------------------------------------
# Commands
#-------------------------------------------------------------------------

commands:
  - mkdir -p logs
  # Gather all VCS options into "mflowgen-vcs-cmd-opts.txt"
  - python yml2str.py --infile inputs/opts.yml
                      --outfile mflowgen-vcs-cmd-opts.txt
                      --line
  # Gather all VCS file list orderings into "mflowgen-vcs-cmd-files.txt"
  - ln -sf inputs/files
  - find -L inputs/adk -name *.v > mflowgen-vcs-cmd-files.txt # adk
  - python yml2str.py --infile inputs/files-order.yml
                      --outfile mflowgen-vcs-cmd-files.txt
                      --line --append
  # Save VCS command to file
  - CMD="vcs -full64 -top $top_name -file mflowgen-vcs-cmd-opts.txt -file mflowgen-vcs-cmd-files.txt"
  - echo $CMD > mflowgen-vcs-cmd.txt
  # Begin VCS build
  - $CMD
  # Prepare outputs
  - mkdir -p outputs && cd outputs
  - ln -sf ../simv
  - ln -sf ../simv.daidir

#-------------------------------------------------------------------------
# Parameters
#-------------------------------------------------------------------------

parameters:
  # Top module name in testbench to pass to VCS as -top
  top_name: top

#-------------------------------------------------------------------------
# Assertions
#-------------------------------------------------------------------------

preconditions:

  - assert Tool( 'vcs' )                 # tool check
  - assert File( 'inputs/adk' )          # must exist

postconditions:

  - assert File( 'outputs/simv' )        # must exist
  - assert File( 'outputs/simv.daidir' ) # must exist


